#!/usr/sbin/nft -f

#
# PREPARE NFTABLES
#

#include "nftdelete.nft"

#
# TABLE DECLARATIONS
#

add table ip client

#
# SETS DEFINITIONS
#

add set client tor_ports { type inet_service; }
#https://www.torproject.org/docs/faq.html.en#OutboundPorts
#9030 not used but mentioned
add element client tor_ports { 9001 }
#add element client tor_ports { 9030 }

#default tor ports not mentioned on official site
#https://www.wilderssecurity.com/threads/setting-up-tor-proxomitron-sockscap.55748/
#add element client tor_ports { 9001, 9002, 9003, 9004 }
#add element client tor_ports { 9030, 9031, 9032, 9033 }
#add element client tor_ports { 9100 }

#
# VARIABLES DEFINITIONS
#

#log group for ulogd2
define log_group = 2

#dnscrypt
define dnscrypt_port = 5353
define dnscrypt_server = 5.135.66.222

#
# CHAIN DECLARATIONS
#

add chain ip client outbound {
        type filter hook output priority 0; policy drop;
}

add chain ip client inbound {
	type filter hook input priority 0; policy drop;
}

add chain ip client established_in
add chain ip client established_out
add chain ip client new_out
add chain ip client new_in
add chain ip client related_out
add chain ip client related_in

#
# LOOPBACK INTERFACE
#

add rule ip client inbound iif lo accept
add rule ip client outbound oif lo accept

#
# STATEFULL FILTERING
#

# established connection
add rule ip client outbound ct state established jump established_out
add rule ip client inbound ct state established jump established_in

# new connection
add rule ip client outbound ct state new jump new_out
add rule ip client inbound ct state new jump new_in

# related connection
add rule ip client outbound ct state related jump related_out
add rule ip client inbound ct state related jump related_in

# invalid connection
add rule ip client outbound ct state invalid log group 2 prefix "invalid" drop
add rule ip client outbound ct state invalid log group 2 prefix "invalid" drop

# untracked connection
add rule ip client outbound ct state untracked log group 2 prefix "untracked"  drop
add rule ip client outbound ct state untracked log  group 2 prefix "untracked" drop

# connection not processed by statefull rules
add rule ip client outbound log group 2 prefix "critical"
add rule ip client inbound log group 2 prefix "critical"

#
# INCLUSIONS
#

#include "client_outbound.nft"
#include "client_inbound.nft"

#
# NEW OUTBOUND CONNECTIONS
#

#dns (should be used as client only)
add rule client new_out udp dport 53 accept
#add rule client new_out tcp dport 53 accept

#dnscrypt
add rule client new_out udp dport $dnscrypt_port ip daddr $dnscrypt_server accept

#http, https, oscp, crl, tor - client
add rule client new_out tcp dport { http, https } accept

#rtmp/e (Flash Media Server)
add rule client new_out tcp dport 1935 accept

#ntp client/server
add rule client new_out tcp sport 123 tcp dport 123 accept

#ftp (active and pasive)
add rule client new_out tcp dport 21 accept

#pop3
#add rule client new_out tcp dport 110 accept

#pop3s
#add rule client new_out tcp dport 995 accept

#smtp (MTA)
#add rule client new_out tcp dport 25 accept

#smtps (MSA)
#add rule client new_out tcp dport 587 accept

#smtps (MTA/MSA)
add rule client new_out tcp dport 465 accept

#imap
#add rule client new_out tcp dport 143 accept

#imaps
add rule client new_out tcp dport 993 accept

#ssh
add rule client new_out tcp dport 22 accept

#git
add rule client new_out tcp dport 9418 accept

#chess (fics)
add rule client new_out tcp dport 5000 accept

#tor
add rule client new_out tcp dport @tor_ports accept

#ping
add rule client new_out icmp type echo-request accept

#traceroute
add rule client new_out udp dport 33434-33523 accept

#bitcoin
add rule client new_out tcp dport 8333 accept

#bitmessage (allow all not needed but asked)
add rule client new_out tcp dport 8444 accept
#add rule client outbound tcp accept

#dhcp
add rule client new_out udp sport 68 udp dport 67 accept

#multicast/broadcast
#add rule client new_out meta pkttype multicast accept
#add rule client new_out meta pkttype broadcast accept

#log
add rule client new_out log group 2 prefix "drop-new-out"

#
# NEW INBOUND CONNECTIONS
#

#dns server (used for vitrual wifi)
add rule ip client new_in ip saddr 172.16.1.0/24 udp dport 53 accept

#dhcp server (used for virtual wifi)
add rule ip client new_in udp sport 68 udp dport 67 accept

#dhcp (broadcast offer - test rule since ISC use raw packets)
add rule client new_in udp sport 67 udp dport 68 ip daddr 255.255.255.255 accept

#bitcoin (node, port forward needed)
add rule ip client new_in tcp dport 8333 accept

#bitmessage (node, port forward needed)
add rule ip client new_in tcp dport 8444 accept

#multicast/broadcast
add rule client new_in meta pkttype multicast accept
add rule client new_in meta pkttype broadcast accept

#log
add rule client new_in log group 2 prefix "drop-new_in"

#
# ESTABLISHED OUTBOUND
#

#dns server (used by virtual wifi)
add rule ip client established_out ip daddr 172.16.1.0/24 udp sport 53 counter accept

#dhcp server (used by virtual wifi)
add rule ip client established_out udp sport 67 udp dport 68 counter accept

#dns client (probably server uses too)
add rule client established_out udp dport 53 accept
add rule client established_out tcp dport 53 accept

#dnscrypt
add rule client established_out udp dport $dnscrypt_port ip daddr $dnscrypt_server accept

#http, https, oscp, crl - client
add rule client established_out tcp dport { http, https } accept

#rtmp/e (Flash media server)
add rule client established_out udp dport 1935 accept

#ntp client/server
add rule client established_out udp sport 123 udp dport 123 accept

#pasive ftp client
add rule client established_out tcp dport 21 accept
add rule client established_out tcp sport >=1024 tcp dport >=1024 accept

#ssh client/server (used by git for ssh)
add rule client established_out tcp dport 22 accept

#pop3
add rule client established_out tcp dport 110 accept

#pop3s
add rule client established_out tcp dport 995 accept

#smtp (MTA)
add rule client established_out tcp dport 25 accept

#smtps (MSA)
add rule client established_out tcp dport 587 accept

#smtps (MTA/MSA)
add rule client established_out tcp dport 465 accept

#imap
add rule client established_out tcp dport 143 accept

#imaps
add rule client established_out tcp dport 993 accept

#git client
add rule client established_out tcp dport 9418 accept

#bitcoin client
add rule client established_out tcp dport 8333 accept

#bitmessage (allow all not neded)
add rule client established_out tcp dport 8444 accept
#add rule client establieshed_out tcp accept

#chess (fics)
add rule client established_out tcp dport 5000 accept

#tor
add rule client established_out tcp dport @tor_ports accept

#dhcp client
add rule client established_out udp sport 68 udp dport 67 accept

#ping
add rule client established_out icmp type echo-request accept

#log
add rule client established_out log group 2 prefix "drop-est-out"

#
# ESTABLISHED INBOUND
#

#dhcp server (userd by virtual wifi)
add rule ip client established_in udp sport 68 udp dport 67 accept

#dns server (used by virtual wifi)
add rule ip client established_in ip saddr 172.16.1.0/24 udp dport 53 accept

#dns
add rule client established_in udp sport 53 accept
#add rule client established_in tcp sport 53 accept

#dnscrypt
add rule client established_in udp sport $dnscrypt_port ip daddr $dnscrypt_server accept

#http, https, oscp, crl client
add rule client established_in tcp sport { http, https } accept

#rtmp/e (Flash Media server)
add rule client established_in tcp sport 1935 accept

#ntp client/server
add rule client established_in udp sport 123 udp dport 123 accept

#pasive ftp client
add rule client established_in tcp sport 21 accept
add rule client established_in tcp sport >=1024 tcp dport >=1024 accept

#pop3
add rule client established_in tcp sport 110 accept

#pop3s
add rule client established_in tcp sport 995 accept

#smtp (MTA)
add rule client established_in tcp sport 25 accept

#smtps (MSA)
add rule client established_in tcp sport 587 accept

#smtps (MTA/MSA)
add rule client established_in tcp sport 465 accept

#imap
add rule client established_in tcp sport 143 accept

#imaps
add rule client established_in tcp sport 993 accept

#git client
add rule client established_in tcp sport 9418 accept

#bitcoin client
add rule client established_in tcp sport 8333 accept

#bitmessage (allow all not needed but asked)
add rule client established_in tcp sport 8444 accept
#add rule client established_in tcp accept

#chess (fics)
add rule client established_in tcp sport 5000 accept

#tor
add rule client established_in tcp sport @tor_ports accept

#dhcp client
add rule client established_in udp sport 67 udp dport 68 accept

#ssh client/server
add rule client established_in tcp sport 22 accept

#reply to ping
add rule client established_in icmp type echo-reply accept
add rule client established_in icmp type destination-unreachable accept
add rule client established_in icmp type time-exceeded accept

#log
add rule client established_in log group 2 prefix "drop-est-in"


#
# RELATED OUTBOUND
#

#pasive ftp client
add rule client related_out tcp sport >=1024 tcp dport >=1024 accept

#reply to dns
add rule client related_out icmp type echo-reply accept

#multicast
#add rule client related_out meta pkttype multicast accept

#broadcast
#add rule client related_out meta pkttype broadcast accept

#log
add rule client related_out log group 2 prefix "drop-rel-out"

#
# RELATED INBOUND
#

#multicast/broadcast
add rule client related_in meta pkttype multicast accept
add rule client related_in meta pkttype broadcast accept
 
#traceroute reply
add rule client related_in icmp type echo-reply accept
add rule client related_in icmp type destination-unreachable accept
add rule client related_in icmp type time-exceeded accept

#active ftp client
add rule client related_in tcp sport 20 accept

#log
add rule client related_in log group 2 prefix "drop-rel-in"

#
# DESTINATION PORT INFO
#

#dns 53
#http 80
#https 443
#ftp 21
#ntp 123
#pop3 110
#pop3s 995
#smtp (MTA) 25
#smtps (MSA) 587
#smtps (MTA/MSA) 465
#imap 143
#imaps 993
#ssh 22
#git (git protocol - for github is either ssh or https) 9418
#chess (fics) 5000
#tor 80, 443, 9001, and 9030 and also others https://www.wilderssecurity.com/threads$
#tor opens port tcp 9050 on localhost for applications to connect
#bitcoin 8333
#bitmessage 8444

#
# DESTINATION UDP PORTS
#

#dns 53 (dnscrypt 443)
#dhcp 67 (server) 68 (client) #ISC related software bypases these by using raw socke$
#ntp 123
#traceroute 33434:33523

#ICMP TYPE
#Echo Reply 0
#Destination Unreachable 3
#Echo 8
#Time Exceeded 11

#INFO ABOUT DESIGN

#statefull filtering section filters packets by state into custom chains first
#each custom chain then filters according to port, protocol etc...

#log custom chains are used by other custom chains for logging according to
#kernel log levels


#each rule or set of rules have a comment: protocol/program, server/client (info)




